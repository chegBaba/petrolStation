model PetrolSupplySystem
-------------------------------------------------------------------------------
-- CLASSES ********************************************************************
-------------------------------------------------------------------------------

class Company
attributes
  name : String
  wsprice : Integer --wholesale price
  money : Real
end

class Station
attributes
  owedMoney : Real -- the amount station need to pay to the Company
  money : Real -- the amount station earned
  records : Record
operations
  payOwe(amount : Real):Real
  resetRecord():Record -- reset the record written by other classe
  restock(volume : Real): Real -- company came over to fill me up
end

class Pump
attributes
  fillVolume : Real
  rtPrice : Real --retail price
  occupied : Boolean --a Pump servse one/two at same time
  isReset : Boolean --Supervisor can reset this 
operations
  pumping(volume : Real):Real
end

class Store
attributes
  remainVolume : Real
  capacity : Real
end

class Record
 attributes
  volume : Real
 operations
  reset() : Real-- reset the data
end

class Person
 attributes 
  name : String
  money : Real
end

class Supervisor < Person
 attributes
  todo : Integer
  myStation : Station 
  notes : Record
 operations
  reset(p : Pump)
  reportRecords():Record
end

class Customer < Person
 attributes
  requiredVolume : Real
  todo : String
 operations
  fillup(fillAmount : Real):Real
end

-------------------------------------------------------------------------------
-- ASSOCIATIONS ***************************************************************
-------------------------------------------------------------------------------

association owns between
  Company[1] role head
  Station[1..*] role sub
end

association has between
  Station[1] role loc
  Pump[1..*] role equ
end

association gasStorage between
  Station[1] role host
  Store[1] role gasPool
end

association connectedTo between
  Store[1] role source
  Pump[1..*] role drain
end

association recording between
  Supervisor[1] role operater
  Pump[1..*] role device
end

association reporting between
  Supervisor[1] role reporter
  Station[1] role plateform
end

association workIn between
  Station[1] role employer
  Supervisor[1] role employee
end

association shoppingAt between
  Customer[1] role paymentSender
  Pump[1] role paymentReceiver
end

-------------------------------------------------------------------------------
-- CONSTRAINTS ****************************************************************
-------------------------------------------------------------------------------
-------------------------------------
--hasMoney: Customer have money to pay
--hasGas: Store have gas to deliver
--payForGas: Money flows 
-------------------------------------
constraints
context Customer::fillup(fillAmount:Real):Real
  pre hasGas: self.paymentReceiver.source.remainVolume >= fillAmount
  pre hasMoney: self.money > fillAmount*(self.paymentReceiver.rtPrice)
  post payForGas: self.money = self.money - fillAmount*(self.paymentReceiver.rtPrice)

-------------------------------------
--billPaid: Station has pay bills before get a refill
--fullFill: restore gasPool to max
--clearRecord: clean record
-------------------------------------
context Station::restock(volume:Real):Real
  --pre billPaid: self.owedMoney = 0
  pre needFill: self.gasPool.remainVolume < self.gasPool.capacity - 500
  post fullFill: self.gasPool.remainVolume = self.gasPool.capacity

-------------------------------------
--payOff: payOff Company to clear record
--clearRecord: clean record
-------------------------------------
--context Station::resetRecord():Record
  --post payOff: self.head.money = self.head.money + self.owedMoney
  --post clearRecord: self.records.volume = 0

context Station::payOwe(amount:Real):Real
  pre haveMoney: self.money > owedMoney
  post pay: self.head.money =+owedMoney
  post payOff: self.money = self.money - owedMoney
  post clearRecord: self.records.volume = 0

context Record::reset():Real
  post clearRecord: self.volume = 0

context Pump::pumping(volume:Real):Real
  pre haveSource: self.source.remainVolume>volume
  pre: isReset = true
  post superVisorRecord: self.operater.notes.volume=+volume
 -- post requestPayment: self.paymentSender.money =- fillVolume*rtPrice
  post collectMoney: self.loc.money=+fillVolume*rtPrice
  post :isReset = false

context Supervisor::reportRecords():Record
  pre: self.notes.volume > 0
  pre workHere: self.employer = self.plateform
  pre allPumpRecorded: self.device->forAll(p:Pump | p.isReset = true) = true--self.device.isReset = true
  post reportVolume: self.plateform.records.volume=+self.notes.volume
------------
--invariants
------------
context Company inv noFreeSupport:
  self.wsprice > 0
context Company inv haveStation:
  self.sub->size() > 0

context Station inv moreThan2Pumps:
  self.equ->size() > 1
context Station inv onlyOneStore:
  self.gasPool->size() = 1

context Store inv cap:
  self.remainVolume >= 0 and self.remainVolume <= self.capacity

context Customer inv enoughMoney:
  self.money >= self.requiredVolume * self.paymentReceiver.rtPrice

context Pump inv noFreeGas:
  self.rtPrice > 0
context Pump inv readyToUse:
  self.isReset = true
context p : Pump inv onePumpOneStation:
  p.loc->size() = 1

context Pump inv profitRetailPrice: -- retail price shall higher than wholesale
  self.rtPrice > self.loc.head.wsprice




